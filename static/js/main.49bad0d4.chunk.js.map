{"version":3,"sources":["Component/Pagenation.js","Component/Searchbar.js","App.js","reportWebVitals.js","index.js"],"names":["Pagenation","pageperdata","totaldata","paginate","pageno","console","log","i","Math","ceil","push","className","map","no","index","onClick","href","Searchbar","useState","data","setData","currpage","setCurrpage","indexlastdata","indexfirstdata","type","placeholder","value","onChange","event","target","Jsondata","slice","filter","val","first_name","toLowerCase","includes","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s1rFA0BeA,MAxBf,YAAuD,IAAlCC,EAAiC,EAAjCA,YAAYC,EAAqB,EAArBA,UAAUC,EAAW,EAAXA,SAChCC,EAAO,GACbC,QAAQC,IAAIJ,GACb,IAAK,IAAIK,EAAE,EAAEA,GAAKC,KAAKC,KAAKP,EAAUD,GAAaM,IAE/CH,EAAOM,KAAKH,GAEhB,OACI,8BACI,oBAAII,UAAU,aAAd,SACIP,EAAOQ,KAAI,SAACC,EAAGC,GACb,OACE,oBAAgBH,UAAU,YAA1B,SACG,mBAAGI,QAAS,kBAAIZ,EAASU,IAAKG,KAAK,KAAKL,UAAU,YAAlD,SAA+DE,KADzDC,WCgCdG,MA3Cf,WACI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOjB,EAAP,KACMsB,GADN,KACsBF,EAASpB,GACzBuB,EAAiBD,EAActB,EAKrC,OACI,gCACI,uBAAOwB,KAAK,OAAOC,YAAY,iBAAiBC,MAAOR,EAAMS,SAAU,SAACC,GAAST,EAAQS,EAAMC,OAAOH,UACtG,8BAEKI,EAASC,MAAMR,EAAeD,GAC9BU,QAAO,SAACC,GACL,MAAS,IAANf,GAKKe,EAAIC,WAAWC,cAAcC,SAASlB,EAAKiB,eAJxCF,OAIN,KAMRtB,KAAI,SAACsB,EAAIpB,GAEN,OACI,4BAAgBoB,EAAIC,YAAZrB,QAMpB,cAAC,EAAD,CAAYb,YAAaA,EAAaC,UAAW6B,EAASO,OAAQnC,SA/B3D,SAACU,GACZS,EAAYT,UCEL0B,MARf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,cAAC,EAAD,OCKS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49bad0d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Pagenation({pageperdata,totaldata,paginate}) {\r\n     const pageno=[];\r\n     console.log(totaldata);\r\n    for (let i=1;i <= Math.ceil(totaldata/pageperdata);i++)\r\n    {\r\n        pageno.push(i);\r\n    }\r\n    return (  \r\n        <nav>\r\n            <ul className=\"pagination\">\r\n               {pageno.map((no,index )=>{\r\n                  return(\r\n                    <li key={index} className=\"page-item\">\r\n                       <a onClick={()=>paginate(no)} href=\"!#\" className=\"page-link\">{no}</a>  \r\n                    </li>\r\n                  );\r\n                   \r\n               })}\r\n            </ul>  \r\n           \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagenation;\r\n","import React,{useState} from 'react'\r\nimport Jsondata from \"./MOCK_DATA.json\"\r\nimport Pagenation from './Pagenation';\r\nfunction Searchbar() {\r\n    const [data, setData] = useState('');\r\n    const [currpage, setCurrpage] = useState(1);\r\n    const [pageperdata, setPageperdata] = useState(50);\r\n    const indexlastdata = currpage*pageperdata;\r\n    const indexfirstdata = indexlastdata-pageperdata;\r\n    const paginate=(no)=>{\r\n        setCurrpage(no);\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Search........\" value={data} onChange={(event)=>{setData(event.target.value);}}></input>\r\n            <div>\r\n                  \r\n                {Jsondata.slice(indexfirstdata,indexlastdata)\r\n                .filter((val)=>{\r\n                    if(data==\"\"){\r\n                        return val;\r\n                    \r\n                    }\r\n                    \r\n                    else if(val.first_name.toLowerCase().includes(data.toLowerCase())){\r\n                        return val;\r\n\r\n                    }\r\n                })\r\n                 \r\n                .map((val,index)=>\r\n                {\r\n                    return (\r\n                        <p key={index}>{val.first_name}</p>\r\n                        );\r\n                })\r\n                 }\r\n              \r\n            </div>\r\n            <Pagenation pageperdata={pageperdata} totaldata={Jsondata.length} paginate={paginate}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar\r\n","\nimport './App.css';\nimport Searchbar from './Component/Searchbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Searchbar/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}